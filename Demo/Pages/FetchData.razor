@page "/fetchdata"
@using BlazingComponents.Demo.Models
@using BlazingComponents.Demo.Services
@using BlazingComponents.Lib.Models
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <Progress ProgressType="@(EProgressType.Animated)" ProgressValue="@Progress"></Progress>
}
else
{
    <button class="btn btn-outline-dark" onclick="@Refresh">Refresh</button>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    WeatherForecast[] forecasts;

    private int Progress { get; set; } = 0;

    protected override async Task OnInitAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    protected async void Refresh()
    {
        forecasts = null;
        for(int i =0; i<=100; i++)
        {
            Progress++;
            await Task.Delay(300);
            StateHasChanged();

        }
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        StateHasChanged();
        Progress = 0;
    }
}
